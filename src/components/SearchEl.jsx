import React, { useState, useCallback, useEffect } from "react";
import { BsFilter, BsSearch } from "react-icons/bs";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import genresData from "../assets/json/available_genres.json";
import { API_URL } from "../assets/config";
import LoadingEl from "../components/ui/Loading";

const debounce = (func, delay) => {
  let timeoutId;
  return (...args) => {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => func(...args), delay);
  };
};

function SearchEl() {
  const [anime, setAnime] = useState([]);
  const [visibleAnime, setVisibleAnime] = useState([]);
  const [visibleCount, setVisibleCount] = useState(12); // –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ 12 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const [selectedGenre, setSelectedGenre] = useState(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [loading, setLoading] = useState(false);
  const [showGenres, setShowGenres] = useState(true);
  const navigate = useNavigate();

  // –ú–∞–ø–ø–∏–Ω–≥ —Ä—É—Å—Å–∫–∏—Ö –∂–∞–Ω—Ä–æ–≤ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–µ—Ä–≤–µ—Ä—É
  const genreMapping = {
    –≠–∫—à–µ–Ω: "Action",
    –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è: "Adventure",
    –ö–æ–º–µ–¥–∏—è: "Comedy",
    –î—Ä–∞–º–∞: "Drama",
    –≠—Ç—Ç–∏: "Ecchi",
    –§—ç–Ω—Ç–µ–∑–∏: "Fantasy",
    –•–æ—Ä—Ä–æ—Ä: "Horror",
    –ú–µ—Ö–∞: "Mecha",
    –ú—É–∑—ã–∫–∞: "Music",
    –î–µ—Ç–µ–∫—Ç–∏–≤: "Mystery",
    –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ: "Psychological",
    –†–æ–º–∞–Ω—Ç–∏–∫–∞: "Romance",
    –ù–∞—É—á–Ω–∞—è_—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞: "Sci-Fi",
    –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç—å: "Slice of Life",
    –°–ø–æ—Ä—Ç: "Sports",
    –°–≤–µ—Ä—Ö—ä–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ: "Supernatural",
    –¢—Ä–∏–ª–ª–µ—Ä: "Thriller",
    // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –º–∞–ø–ø–∏–Ω–≥–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∏–º–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
  const loadAnime = useCallback(
    (params, reset = false) => {
      setLoading(true);
      axios
        .get(`${API_URL}/anime`, {
          params: {
            genre: params.genre ? genreMapping[params.genre] || params.genre : "",
            search: params.search || "",
          },
        })
        .then((response) => {
          // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ _id
          const uniqueAnime = Array.from(
            new Map(response.data.map((item) => [item._id, item])).values()
          ).map((item) => ({
            ...item,
            Genre: Array.isArray(item.Genre)
              ? item.Genre.map((g) => {
                  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∂–∞–Ω—Ä—ã –≤ —Ä—É—Å—Å–∫–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                  const russianGenre = Object.entries(genreMapping).find(
                    ([_, eng]) => eng === g
                  )?.[0];
                  return russianGenre || g; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä—É—Å—Å–∫–∏–π –∂–∞–Ω—Ä –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –µ—Å–ª–∏ –º–∞–ø–ø–∏–Ω–≥–∞ –Ω–µ—Ç
                })
              : [],
          }));
          console.log("üìå –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", uniqueAnime);
          setAnime(uniqueAnime);
          setVisibleAnime(uniqueAnime.slice(0, reset ? 12 : visibleCount));
          setLoading(false);
        })
        .catch((error) => {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error);
          setLoading(false);
        });
    },
    [visibleCount]
  );

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∂–∞–Ω—Ä—É
  const filterByGenre = useCallback(
    (genreValue) => {
      setSelectedGenre(genreValue);
      setSearchQuery("");
      setVisibleCount(12);
      setShowGenres(false);
      loadAnime({ genre: genreValue }, true); // –ü–µ—Ä–µ–¥–∞—ë–º —Ä—É—Å—Å–∫–∏–π –∂–∞–Ω—Ä, —Å–µ—Ä–≤–µ—Ä –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    },
    [loadAnime]
  );

  // –ó–∞–¥–µ—Ä–∂–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫
  const debouncedSearch = useCallback(
    debounce((query) => {
      if (query.trim()) {
        setShowGenres(false);
        loadAnime({ search: query }, true);
      } else {
        setShowGenres(true);
        setAnime([]);
        setVisibleAnime([]);
      }
    }, 1000),
    [loadAnime]
  );

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞
  const handleSearch = (e) => {
    const query = e.target.value;
    setSearchQuery(query);
    setSelectedGenre(null);
    setVisibleCount(12);
    debouncedSearch(query);
  };

  // –í–æ–∑–≤—Ä–∞—Ç –∫ –∂–∞–Ω—Ä–∞–º
  const handleBackToGenres = () => {
    setShowGenres(true);
    setSelectedGenre(null);
    setSearchQuery("");
    setAnime([]);
    setVisibleAnime([]);
    setVisibleCount(12);
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–Ω–∏–º–µ
  const handleLoadMore = () => {
    if (visibleCount < anime.length) {
      const newCount = visibleCount + 12;
      setVisibleCount(newCount);
      setVisibleAnime(anime.slice(0, newCount));
    }
  };

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–ª–µ–µ—Ä–∞
  const handleCardClick = (imdbID) => {
    navigate(`/player/${imdbID}`);
  };

  return (
    <div className="p-3">
      <div className="flex flex-row justify-center mt-15 mb-5 sm:mb-8 gap-2">
        <div className="relative flex items-center sm:duration-300 hover:scale-101">
          <BsSearch className="absolute ml-3 text-2xl" />
          <input
            type="text"
            value={searchQuery}
            onChange={handleSearch}
            className="bg-gray-700 w-full sm:w-120 h-11 text-white text-lg pl-11 outline-none focus:ring-blue-600 focus:ring-1 focus:shadow-lg focus:shadow-blue-600/30 rounded-md"
            placeholder="–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ..."
          />
        </div>
        <div className="h-11 w-11 rounded-md flex items-center justify-center bg-gray-700 sm:duration-300 hover:scale-105">
          <BsFilter className="text-3xl" />
        </div>
      </div>

      {showGenres ? (
        <div className="flex gap-2 sm:gap-3 justify-center max-w-500 sm:max-w-500 flex-wrap">
          {Object.entries(genresData).map(([key, value]) => (
            <div
              key={key}
              onClick={() => filterByGenre(value)}
              className="bg-gray-700 w-47 h-20 sm:w-73 sm:h-30 duration-300 cursor-pointer hover:scale-105 flex justify-center items-center p-2 rounded-md text-white text-lg font-bold"
            >
              {value}
            </div>
          ))}
        </div>
      ) : (
        <>
          <button
            onClick={handleBackToGenres}
            className="mb-5 px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 duration-300"
          >
            –ù–∞–∑–∞–¥ –∫ –∂–∞–Ω—Ä–∞–º
          </button>

          <div className="flex gap-5 justify-center max-w-500 sm:max-w-500 flex-wrap mt-5">
            {loading ? (
              <LoadingEl />
            ) : visibleAnime.length > 0 ? (
              visibleAnime.map((item) => (
                <div
                  key={item._id}
                  onClick={() => handleCardClick(item.imdbID)}
                  className="bg-transparent w-64 h-auto duration-300 cursor-pointer hover:scale-105 flex flex-col justify-center items-center rounded-md"
                >
                  <img
                    src={
                      item.Poster || "https://dummyimage.com/500x750/gray/white?text=–ù–µ—Ç+–ø–æ—Å—Ç–µ—Ä–∞"
                    }
                    alt={item.Title}
                    className="w-64 h-96 object-cover rounded-md"
                    onError={(e) => {
                      e.target.src =
                        "https://dummyimage.com/500x750/gray/white?text=–ù–µ—Ç+–ø–æ—Å—Ç–µ—Ä–∞";
                      e.target.onerror = null; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –æ—à–∏–±–∫–∏
                    }}
                  />
                  <span className="h-15 w-auto flex justify-center m-4 text-white text-lg font-bold">
                    {item.Title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}
                  </span>
                  {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∂–∞–Ω—Ä–æ–≤ –∫–∞–∫ —Å–ø–∏—Å–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ */}
                </div>
              ))
            ) : (
              <p className="text-white text-lg">
                {searchQuery
                  ? `–ê–Ω–∏–º–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${searchQuery}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`
                  : `–ê–Ω–∏–º–µ –ø–æ –∂–∞–Ω—Ä—É "${selectedGenre}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`}
              </p>
            )}
          </div>

          {visibleAnime.length > 0 && visibleCount < anime.length && (
            <div className="flex justify-center">
              <button
                onClick={handleLoadMore}
                className="mt-5 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 duration-300"
                disabled={loading}
              >
                {loading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë"}
              </button>
            </div>
          )}
        </>
      )}
    </div>
  );
}

export default SearchEl;